Check Out Commands 
===================
git pull origin pull/<PULL REQUEST ID>/head


Info commands
===================

# show all remote branches, with dates of last commit:
git for-each-ref --sort=committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:short)%(color:reset))'

alias branches="git for-each-ref --sort=committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:short)%(color:reset))'"


PR commands
===================
fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
 
# switch to PR #999
1. emacs .git/config and add this line: fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
1. Fetch PRs locally: $ git fetch origin
1. Checkout a particular PR: $ git checkout pr/999

REBASE fork
==============
1. git remote add upstream https://github.com/opentripplanner/otp-ui.git
1. git pull
1. git fetch upstream
1. git branch -a
1. git rebase upstream/master
1. git status
1. git push  

MERGE  branch
==================
1. git checkout master
1. git pull
1. git checkout vehicles
1. git pull
1. git merge master
1. git commit -a -m "merged latest master onto my feature branch"
1. git push
1. # NOTE: you should now be able to create a PR and it should be realtively clean (just files you changed in your feature branch)

REBASE branch w/master -- NOTE, this can be funky (see MERGE above as an alternate)
==================
1. git checkout master
1. git pull
1. git checkout vehicles
1. git pull


Working with FORKZ:
===================
I (John Z) use a rebase workflow in a similar scenario for repos I've forked from.  I take a little longer way to do the same thing Grant is suggesting, but it keeps everything reliably separated for me at least.   I generally only pull upstream into master and in my forked repo I leave master alone, treating it as my pivot branch between the two origins.  I then rebase master into whatever I am working on locally.

1. Fork project
1. Clone fork locally
1. Fork is now origin
1. Create a new branch in your local fork to work in: git checkout -b working
1. Set original as "upstream" remote: git remote add upstream https://github.com/ORIGINAL_REPO
1. Checkout master and run: git checkout master && git pull upstream master
1. Checkout working and run: git checkout working && git rebase master


'''

# do this once to set up local repo
git clone git@github.com:TriMetPDX/otp-react-redux.git
git remote add upstream https://github.com/opentripplanner/otp-react-redux.git
git checkout -b tm_vehicles
git push --set-upstream origin tm_vehicles

# repeat whenever you want to rebase the fork's parent
git checkout master && git pull upstream master
git checkout trimet-dev && git pull upstream trimet-dev
git checkout tm_vehicles && git rebase trimet-dev


# NOTE: might not make any changes to trimet-mod-otp, so may not need do this, but...
# do this once
git clone git@github.com:TriMetPDX/trimet-mod-otp.git
git remote add upstream https://github.com/conveyal/trimet-mod-otp.git
git checkout -b tm_vehicles
git push --set-upstream origin tm_vehicles

# repeat whenever you want to rebase the fork's parent
git checkout master && git pull upstream master
git checkout tm_vehicles && git rebase master

'''

NOTE: your local commit hashes changed in the 'working' branch, but you've incorporated everything from the upstream master into your local project.

Pivot point from github to local gitlab:
=========================================
git clone https://github.com/conveyal/trimet-mod-otp.git
git remote rm origin
git remote add origin git@gitlab.trimet.org:mod/trimet-mod-otp.git
git remote add upstream https://github.com/conveyal/trimet-mod-otp.git
git push origin master -u
git pull upstream master
git fetch upstream
git fetch upstream --prune



